#lang racket
(define (even n)
  (= (remainder n 2) 0))
(define (double x)
  (+ x x))
(define (halve x)
  (/ x 2))
(define (fast-multiply a b)
  (cond ((= 1 b) a)
        ((<= b 0) 0)
        ((even b) (double (fast-multiply a (halve b))))
        (else (+ a (double (fast-multiply a (halve (- b 1))))))))

(define (mul-iter a b p)
  (cond ((<= b 0) 0)
        ((< b 2) (+ a p))
        ((even b) (mul-iter (double a) (halve b) p))
        (else (mul-iter a (- b 1) (+ p a)))))
(mul-iter 2 7 0)