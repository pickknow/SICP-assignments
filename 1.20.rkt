#lang racket
(define (smallest-divisor n)
  (find-divisor n 2))
(define (square x)
  (* x x))
(define (find-divisor n t)
  (cond ((> (square t) n) n)
        ((divides? t n) t)
        (else (find-divisor n (+ t 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))


(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))