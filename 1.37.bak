#lang racket
(define fi 1.618)
(define (cont-frac n d k)  
    (define (try x)
      (if (> x k)
           (d k)
          (+ (d k) (/ (n (+ k 1)) (try (+ x 1))))))
  (/ (d 0) (try 1)))
(cont-frac (lambda (i) 1.0)
           (lambda (i) 1.0)
           9)
(define (cont-frac-iter n d k)
  (define (iter x result)
    (newline)  (display x)  
    (if (= x 0)
        (/ ( n 1) result)
        (iter (- x 1) (+ (d (- x 1)) (/ (n x) result)))))
  (iter k (d k)))
(cont-frac-iter (lambda (i) 1.0)
           (lambda (i) 1.0)
           9)