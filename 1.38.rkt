#lang racket
(define (even3? n)
  (= (remainder n 3) 1))
(define (mi-2 n) (mi 2 n 1))
(define (mi a b result)    
  (if (= b 0) result
      (mi a (- b 1) (* result a))))
(define (cont-frac-iter n d k)
  (define (iter x result)
    (if (= x 0)
        (/ ( n 1) result)
        (iter (- x 1) (+ (d (- x 1)) (/ (n x) result)))))
  (iter k (d k)))
(cont-frac-iter (lambda (i) 1.0)
                (lambda (i)
                  (if (even3? i)
                      (mi-2 (/ (+ i 2) 3))
                      1))
           9)