#lang racket
(define (square x) (* x x))
(define (average x y)  (/ (+ x y) 2))
(define tolerance 0.0001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (newline)
    (display guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(define (average-damp f)
  (lambda (x) (average x (f x))))
(define (repeated f n)
  (lambda (x)
    (define (iter k result)
      (if (= k 0)
          result
          (iter (- k 1) (f result))))
    (iter (- n 1) (f x))))
(define dx 0.0001)
(define (smooth f)
  (lambda (x)
    (/ (+ (f (- x dx))
          (f x)
          (f (+ x dx))) 3)))
(define (mi x y)
  (define (iter n result)
    (if (= n 0)
        result
        (iter (- n 1) (* result x))))
  (iter y 1))
(define (sqrt-n x n)
  (fixed-point (average-damp (lambda (y)
                               (/ x (mi y (- n 1))))) 1.0))
(sqrt-n 8 3)

(define (sqrt-smooth x n)
  (fixed-point ((repeated average-damp 3) (lambda (y)
                                           (/ x (mi y (- n 1))))) 1.0))

(sqrt-smooth 8 3)