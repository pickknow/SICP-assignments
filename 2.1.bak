#lang racket
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (make-rat n d)
  (if (or (< n 0) (< d 0))
      (cons (- (abs n)) (abs d))
      (cons n  d)))

(define (make-rat-better n d)
  (if (and (> n 0) (> d 0))
      (cons n d)
      (cons (- n) (abs d))))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
(print-rat (make-rat-better -5 10))
(print-rat (make-rat-better 5 -10))
(print-rat (make-rat-better 5 10))
(print-rat (make-rat-better -5 -10))
