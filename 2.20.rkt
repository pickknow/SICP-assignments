#lang racket
(define (same-parity . y)
  (let ((a (remainder (car y) 2)))
    (define (iter x r)
      (cond ((null? x) r)
            ((= (remainder (car x) 2) a)
             (iter (cdr x) (append r (list (car x)))))
            (else (iter (cdr x) r))))
        (iter y `())))
(same-parity 1 2 3 4 5 6 7)
(same-parity 2 3 4 5 6 7)