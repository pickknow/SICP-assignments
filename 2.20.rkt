#lang racket
(define (same-parity . y)
  (let ((a (remainder (car y) 2)))
    (define (iter x r)
      (if (null? x)          
          (if (= (remainder (car x) 2) a)
               (iter (cdr x)(cons r (car x)))
               (iter (cdr x) r))))
    (iter (cdr y) (car y))))
(same-parity 1 2 3 4 5 6 7)
(same-parity 2 3 4 5 6 7)