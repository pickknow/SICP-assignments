#lang racket
(define (print-rat x)
  (newline)
  (display (start-segment x))
  (display ",")
  (display (end-segment x)))
(define (make-segment x y) (cons x y))
(define (start-segment x) (car x))
(define (end-segment x) (cdr x))

(define (make-point x y) (cons x y))
(define (x-point x) (car x))
(define (y-point y) (cdr y))

(define (midpoint-segment x)  
  (let ((midx (/ (+ (car (car x)) (car (cdr x))) 2))
        (midy (/ (+ (cdr (car x)) (cdr (cdr x))) 2)))
        (cons midx midy)))
(define (perimeter p)
  (let ((startx (car (car p)))
        (endx (car (cdr p)))
        (starty (cdr (car p)))
        (endy (cdr (cdr p))))
        (* 2 (+ (- endx startx)
                (- endy starty)))))
(define (area p)
  (let ((startx (car (car p)))
        (endx (car (cdr p)))
        (starty (cdr (car p)))
        (endy (cdr (cdr p))))
        (* (- endx startx)
                (- endy starty))))
(perimeter (make-segment (make-point 1 1)
                            (make-point 3 3)))
(area (make-segment (make-point 1 1)
                            (make-point 3 3)))

(define (rectangle p)
  (let ((a (- (car (cdr p)) (car (car p))))
        (b (- (cdr (cdr p)) (cdr (car p)))))
    (cons a b)))

(define (perimeter-lite p)
  (* 2 (+ (car p) (cdr p))))
(define (area-lite p)
  (* (car p) (cdr p)))
(define rect (make-segment (make-point 1 1)
                            (make-point 3 3)))
(perimeter-lite (rectangle rect))
(area-lite (rectangle rect))
                            
