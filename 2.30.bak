#lang racket
(define (square x) (* x x))
;2.11
(define (square-list items)
  (if (null? items)
      `()
      (cons (square (car items))
             (square-list (cdr items)))))
(square-list (list 1 2 3 4))
(define (square-list2 items)
  (map square items))
(square-list (list 1 2 3 4))

(define test (list 1 (list 2 (list 3 ) 5) (list 6 7)))
(define (square-tree tree f)
  (cond ((null? tree) null)
        ((not(pair? tree)) (f tree))
        (else (cons (square-tree (car tree) f)
                    (square-tree (cdr tree) f)))))
(define (square-tree-map tree f)
  (map (lambda (sub-tree)
         (if (pair? sub-tree)
             (square-tree-map sub-tree f)
             (f sub-tree)))
       tree))
         
(square-tree test square)
(square-tree-map test square)