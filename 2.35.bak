#lang racket
(define testval (list 'a (list 'b 'c 'd 'e) 'f (list 'g 'h (list 'i (list 'j 'k) 'l))))
(define (enumerate-tree tree)
  (cond ((null? tree) `())
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                      (enumerate-tree (cdr tree))))))
(enumerate-tree testval)

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (count-leaves t)
  (accumulate
   +
   0
   (map (lambda (x) 1)
          (enumerate-tree t))
         ))
(define (count-leavesa t)
  (accumulate
   +
   0
   (map (lambda (x)
          (length (enumerate-tree x)))
        t)))
(count-leaves testval)
(count-leavesa testval)