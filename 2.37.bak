#lang racket
(require "lib/lib1.rkt")
(define test `((1 2 3 4) (4 5 6 6) (6 7 8 9)))

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      `()
      (cons (accumulate op init  (mapa seqs))
            (accumulate-n op init (mapb seqs)))))

(define (map-map op . z)
  (accumulate-n + 0 z))
(map-map + `(1 2 3) `(10 20 30) `(100 200 300))

(define (dot-product v w)
  (accumulate + 0 (map-map * v w)))
(dot-product test test)
