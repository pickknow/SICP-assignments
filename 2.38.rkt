#lang racket
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      `()
      (cons (accumulate op init  (mapa seqs))
            (accumulate-n op init (mapb seqs)))))
(define (mapa seqs)
  (map (lambda (x)
         (car x))
       seqs))
(define (mapb seqs)
  (map (lambda (x)
         (cdr x))
       seqs))
(define (fold-left op initial sequence)
  (define (iter result seq)
    (if (null? seq)
        result
        (iter (op result (car seq))
              (cdr seq))))
  (iter initial sequence))
(accumulate / 1 `(1 2 3))
(fold-left / 1 `(1 2 3))
(accumulate list null (list 1 2 3))
(fold-left list null (list 1 2 3))
+ *