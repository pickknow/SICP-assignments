#lang racket
(define (memq item x)
  (cond ((null? x) false)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)))))
;(define (equal? list1 list2)
;  (cond ((or (null? list1) (null? list2)) true)
;        ((not (eq? (car list1) (car list2))) false)
;        (else (equal? (cdr list1) (cdr list2)))))
(define (equal? x y)
  (cond ((and (null? x) (null? y)) true)
        ((and  (pair? x) (pair? y)
               (eq? (car x) (car y)))
         (equal? (cdr x) (cdr y)))
        (else false)))
(equal? `(this is a list) `(this is a list))
(equal? `(this is a list) `(this is a ))
(equal? `(this is a list) `(this (is a) list))