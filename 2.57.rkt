#lang racket
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1)
       (variable? v2)
       (eq? v1 v2)))
(define (sum? x)
  (and (pair? x) (eq? (car x) `+)))
(define (product? x)
  (and (pair? x) (eq? (car x) `*)))

(define (=number? exp num)
  (and (number? exp) (= exp num)))
;make-sum
(define addend  cadr)
(define (augend x)
  (let ((t (cddr x)))
  (cond ((not (pair? (cdr t))) (car t))
        (else (cons `+ t)))))
(define test `(+ 1 (* 3 4) 4))
(cons `+  (cddr test))

(define (make-sum x y)
  (cond ((=number? x 0) y)
        ((=number? y 0) x)
        ((and (number? x) (number? y)) (+ x y))
        (else (list `+ x y))))
;pruduct
(define multiplier cadr)
(define (multiplicand x)
  (let ((t (cddr x)))
  (cond ((not (pair? (cdr t))) (car t))
        (else (cons `* t)))))
(define test1 `(* x y (+ x 3)))
(cons `*  (cddr test1))
(define (make-product x y)
  (cond ((or(=number? x 0) (=number? y 0)) 0)
        ((=number? x 1) y)
        ((=number? y 1) x)
        ((and (number? x) (number? y)) (* x y))
        (else (list `* x y))))
(define (exponentiation? exp)
  (and (pair? exp) (eq? (car exp) `**)))
(define base cadr)
(define exponent caddr)
(define (make-exponetiation base exponent)
  (cond ((=number? exponent 1) base)
        ((=number? exponent 0) 1)
        (else (list `** base exponent))))
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
         (make-product (multiplier exp)
                       (deriv (multiplicand exp) var))
         (make-product (deriv (multiplier exp) var)
                       (multiplicand exp))))
        ((exponentiation? exp)
         (make-product
          (make-product
           (exponent exp)
           (make-exponetiation (exponent exp)
                               `(- ,(base exp) 1)))
          
          (deriv (base exp) var)))
        (else
         (error "unkonw expression type --DERIV" exp))))
(deriv `(+ x 3 5 (* 1 2)) `x)
;(deriv `(* x y) `x)
;(deriv '(** (* x y) 6) 'x)
;(deriv `(** x y) `x)
;(deriv `(* (* x y) (+ x 3)) `x)
;'(+ (* x y) (* y (+ x 3)))
(deriv `(* x y (+ x 3)) `x)