#lang racket
(define zero (lambda (f) (lambda (x) x)))
(define (add-1 n)
  (lambda (f) (lambda (x)
                (f ((n f) x)))))
(define one (lambda (f) (lambda (x) (f x))))
(define two (lambda (f) (lambda (x) (f (f x)))))
(define (inc x) (+ x 1))
(define (more n)
  (lambda (f)
    (lambda (x)
      (define (iter c r)
        (if (= c 1)
            r
            (iter (- c 1) (f r))))
      (iter n (f x)))))
(((more 3) inc) 0)
(define (add a b)
  (lambda (f)
    (lambda (x)
      ((a f) ((b f) x)))))