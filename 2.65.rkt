#lang racket
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((= x (entry set)) #t)
        ((< x (entry set))
         (element-of-set? x (left-branch set)))
        ((> x (entry set))
         (element-of-set? x (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x `() `()))
        ((= x (entry set)) set)
        ((< x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (left-branch set))))
        ((> x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (right-branch set))))))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))
(define (partial-tree elts n)
  (if (= n 0)
      (cons `() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                   (right-result (partial-tree (cdr non-left-elts)
                                               right-size)))
                  (let ((right-tree (car right-result))
                        (remaining-elts (cdr right-result)))
                    (cons (make-tree this-entry left-tree right-tree)
                          remaining-elts))))))))
(define (intersection-set s1 s2)
  (if (or (null? s1) (null? s2))
      `()
      (let ((x1 (entry s1)) (x2 (entry s2)))
        (cond ((= x1 x2) (make-tree x1
                                    (intersection-set (left-branch s1)
                                               (left-branch s2))
                                    (intersection-set (right-branch s1)
                                               (right-branch s2))))
              ((< x1 x2) (intersection-set (right-branch s1)
                                     (make-tree x2
                                                (intersection-set
                                                 (make-tree x1 (left-branch s1) `())
                                                 (left-branch s2))
                                               (right-branch s2))))
              ((> x1 x2) (intersection-set (make-tree x1
                                               (intersection-set
                                                (make-tree x2 (left-branch s2) `())
                                                (left-branch s1))
                                               (right-branch s1))
                                               (right-branch s2)))))))
                                  
(define (union-set s1 s2)
  (cond ((null? s1) s2)
        ((null? s2) s1)
        (else 
      (let ((x1 (entry s1)) (x2 (entry s2)))
        (cond ((= x1 x2) (make-tree x1
                                    (union-set (left-branch s1)
                                               (left-branch s2))
                                    (union-set (right-branch k1)
                                               (right-branch s2))))
              ((< x1 x2) (union-set (right-branch s1)
                                     (make-tree x2
                                                (union-set
                                                 (make-tree x1 (left-branch s1) `())
                                                 (left-branch s2))
                                               (right-branch s2))))
              ((> x1 x2) (union-set (make-tree x1
                                               (union-set
                                                (make-tree x2 (left-branch s2) `())
                                                (left-branch s1))
                                               (right-branch s1))
                                               (right-branch s2))))))))

(define tree1 '(5 (3 (1 () ()) ()) (9 (7 () ()) (11 () ()))))
(define tree2 '(5 (4 (2 () ()) ()) (9 (7 () ()) (10 () ()))))                     
(intersection-set tree1 tree2)
(union-set tree1 tree2) 
