#lang racket
(require "lib/huffman.rkt")
(define (encode message tree)
  (if (null? message)
      `()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
(define (in? m tree)
  (if (leaf? tree)
      (eq? m (symbol-leaf tree))
      (memq? m (symbols tree))))
(define (encode-symbol m tree)
 (cond ((leaf? tree) `())
       ((in? m (left-branch tree)) 
        (cons 0 (encode-symbol m (left-branch tree))))
       ((in? m (right-branch tree))
        (cons 1 (encode-symbol m (right-branch tree))))))
;(define message-code `(0 1 1 0 0 1 0 1 0 1 1 1 0))
(define message-code '(A D A B B C A))
(encode message-code sample-tree)
;'(A D A B B C A)
