#lang racket
(define (memq? item x)
  (cond ((null? x) false)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)))))
(define (make-leaf symbol weight)
  (list `leaf symbol weight))
(define (leaf? object)
  (eq? (car object) `leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
(define left-branch car)
(define right-branch cadr)
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
            (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))
(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        `()
        (let ((next-branch
               (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))
(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit -- CHOOSE-BRANCH" bit))))
(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))
(define (make-leaf-set pairs)
  (if (null? pairs)
      `()
      (let ((pair (car pairs)))
        (adjoin-set (make-leaf (car pair)
                               (cadr pair))
                    (make-leaf-set (cdr pairs))))))
(define sample-tree
  (make-code-tree (make-leaf `A 4)
                  (make-code-tree
                   (make-leaf `B 2)
                   (make-code-tree (make-leaf `D 1)
                                   (make-leaf `C 1)))))
(define sample-message `(0 1 1 0 0 1 0 1 0 1 1 1 0))
(define message-code '(A D A B B C A))
;(decode sample-message sample-tree)
(define (encode message tree)
  (if (null? message)
      `()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
(define (in? m tree)
  (cond ((null? tree) false)
        ((leaf? tree) (eq? m (symbol-leaf tree)))
        (else (memq? m (caddr tree)))))
(define (encode-symbol m tree)
  (display m)
  (if (not (memq? m (caddr tree)))
      (error "bad" m)
      (let ((s `()))
        (define (encode-1 t)
          (if (leaf? t)
              `()
              (cond ((in? m (left-branch t))
                     (append `(0) (encode-1 (left-branch t))))
                    ((in? m (right-branch t))
                     (append `(1) (encode-1 (right-branch t)))))))
        (encode-1 tree))))
;(encode-symbol `B sample-tree)
(encode message-code sample-tree)
                    
                    
                    
                    
                    
                    
         
               
      
      

          