#lang racket
(require "lib/table.rkt")
(define (install-A)
  (define (make-record name address salary) (list name address salary))
  (define name car)
  (define address cadr)
  (define salary caddr)
  (define (get-record x set)
    (filter (lambda (i)
              (eq? x (car i)))
            set))
  (define (get-salary x set)
    (salary (car (get-record x set))))
  (define (tag x) (attach-tag `A x))
  (put `get-record `A get-record)
  (put `get-salary `A get-salary)
  `done)
(define (install-B)
  (define (make-record name address salary) (list name address salary))
  (define name car)
  (define address cadr)
  (define salary caddr)
  (define (get-record x set)
    (filter (lambda (i)
              (eq? x (car i)))
            set))
  (define (get-salary x set)
    (salary (car (get-record x set))))
  (define (tag x) (attach-tag `B x))
  (put `get-record `B get-record)
  (put `get-salary `B get-salary)
  `done)
(install-A)
(install-B)
(define (get-record x set)
  ((get `get-record (type-tag set)) x (contents set)))
(define (get-salary x set)
  ((get `get-salary (type-tag set)) x (contents set)))
(define A (attach-tag `A `((john xian 500) (jason beijing 1000))))
(define B (attach-tag `B `((john xian 4000) (jason beijing 3000))))

(get-record `john A)
(get-salary `john A)
(define (find-employee-record name records)
  (filter (lambda (i)
            (not (null? (get-record name i))))
          records))
(find-employee-record `john (list A B))
