#lang racket
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var ) 1 0))
        (else ((get `deriv (operator exp)) (operands exp)
                                           var))))
(define operator car)
(define operands cdr)

(define (install-deriv)  
  (define (make-sum x y)
    (cond ((=number? x 0) y)
          ((=number? y 0) x)
          ((and (number? x) (number? y)) (+ x y))
          (else (list `+ x y))))
  (define (make-product x y)
    (cond ((or(=number? x 0) (=number? y 0)) 0)
          ((=number? x 1) y)
          ((=number? y 1) x)
          ((and (number? x) (number? y)) (* x y))
          (else (list `* x y))))
  (put `+ `(deriv) make-sum)
  (put `* `(deriv) make-product))
   (put `deriv `(+) make-sum)
  (put `deriv `(*) make-product)
(define (install-A)
  (define (get-record x) x)
  (define (get-salary x)
    (get-salary-record (get-record x)))
  (put `get-record `(A) get-record)
  (put `get-salary `(A) get-salary))
(define (find-employee-record name records)
  (if (null? records)
      false
      (let ((record ((get `get-record (tag (car records))) name)))
        (if record)
        record
        (find-emloyee-record name (cdr records)))))