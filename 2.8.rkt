#lang racket
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
        (make-interval (min p1 p2 p3 p4)
                       (max p1 p2 p3 p4))))
(define (mul-better x y)
  (let ((p1 (make-interval (min (lower-bound x) (upper-bound x))
                           (max (lower-bound x) (upper-bound x))))
        (p2 (make-interval (min (lower-bound y) (upper-bound y))
                           (max (lower-bound y) (upper-bound y)))))
    (make-interval (* (lower-bound p1) (lower-bound p2))
                   (* (upper-bound p1) (upper-bound p2)))))


(define (div-interval x y)
  (if (or (= (upper-bound y) 0) (= (lower-bound y) 0))
      (display "error")
      (mul-interval x
                    (make-interval (/ 1 (upper-bound y))
                                   (/ 1 (lower-bound y))))))
(define (make-interval a b) (cons a b))
(define (lower-bound x)
  (car x))
(define (upper-bound x)
  (cdr x))
(define (sub-interval x y)
  (make-interval (- (lower-bound y) (lower-bound x))
                 (- (upper-bound y) (upper-bound y))))
