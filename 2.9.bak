#lang racket
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
        (make-interval (min p1 p2 p3 p4)
                       (max p1 p2 p3 p4))))
(define (mul-better x y)
  (let ((p1 (make-interval (min (lower-bound x) (upper-bound x))
                           (max (lower-bound x) (upper-bound x))))
        (p2 (make-interval (min (lower-bound y) (upper-bound y))
                           (max (lower-bound y) (upper-bound y)))))
    (make-interval (* (lower-bound p1) (lower-bound p2))
                   (* (upper-bound p1) (upper-bound p2)))))


(define (div-interval x y)
  (if (or (= (upper-bound y) 0) (= (lower-bound y) 0))
      (display "error")
      (mul-interval x
                    (make-interval (/ 1 (upper-bound y))
                                   (/ 1 (lower-bound y))))))
(define (make-interval a b) (cons a b))
(define (lower-bound x)
  (car x))
(define (upper-bound x)
  (cdr x))
(define (sub-interval x y)
  (make-interval (- (lower-bound y) (lower-bound x))
                 (- (upper-bound y) (upper-bound y))))

(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))
(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))
(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))
 
(define (make-center-percent c p)
  (make-interval (* c (- 1 p)) (* c (+ 1 p))))
(define (percent x)
  (let ((c (center x)))
    (/ (- (upper-bound x) c) c)))

(define (print-point x)
  (newline)
  (display "(")
  (display (car x))
  (display ",")
  (display (cdr x))
  (display ")"))
(define point1 (make-interval 6 8))
(define point2 (make-interval 5.9 6.2))
(print-point (add-interval point1 point2))
(print-point (div-interval point1 point2))
(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))
(define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval one
                  (add-interval (div-interval one r1)
                                (div-interval one r2)))))

(print-point (par1 point1 point2))
(print-point (par2 point1 point2))

(print-point (par1 point1 point1))
(print-point (par1 point1 point2))

(print-point (par2 point1 point1))
(print-point (par2 point1 point2))

(define point11 (make-center-percent 6 0.001))
(define point22 (make-center-percent 7 0.001))
(print-point (par1 point11 point22))
(print-point (par2 point11 point22))

(print-point (par1 point11 point11))
(print-point (par1 point11 point22))

(print-point (par2 point11 point11))
(print-point (par2 point11 point22))
