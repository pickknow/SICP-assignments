#lang racket
(define (cons x y)
  (define (set-x! v) (set! x v))
  (define (set-y! v) (set! y v))
  (define (dispatch m)
    (cond ((eq? m `car) x)
          ((eq? m `cdr) y)
          ((eq? m `set-car!) set-x!)
          ((eq? m `set-cdr!) set-y!)
          (else
           (error "Undefined operation --CONS" m))))
  dispatch)
  
(define (car z) (z `car))
(define (cdr z) (z `cdr))
(define (set-car! z new)
  ((z `set-car!) new)
  z)
(define (set-cdr! z new)
  ((z `set-cdr!) new)
  z)
(define (print-queue queue)
  (if (empty-queue? queue)
      `()
      (let ((f (queue `front-ptr ))
            (e (queue `rear-ptr)))       
        (define (print-front l)
          (if (null? l)
              (display ") ")
              (begin (display (car l))
                     (print-front (cdr l)))))
        (display "(")
        (print-front f)
         (display "(")
        (print-front e))))
(define (make-queue)
  (let ((front-ptr `())
        (rear-ptr `()))    
    (define (empty-queue?) (null? front-ptr)) 
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))   
    (define (dispatch m)
      (cond ((eq? m `front-ptr) front-ptr)
            ((eq? m `rear-ptr) rear-ptr)
            ((eq? m `empty-queue?) (empty-queue?))
            ((eq? m `set-front-ptr!) set-front-ptr!)             
            ((eq? m `set-rear-ptr!) set-rear-ptr!)            
            (else
             (error "Undeifned operation --MAKE-QUEUE" m))))
    dispatch))

(define (empty-queue? queue) (queue `empty-queue?))
(define (insert-queue! queue item)
  (let ((new-pair (cons item `())))
    (cond ((empty-queue? queue)
           ((queue `set-front-ptr!)  new-pair)
           ((queue `set-rear-ptr!)  new-pair)
           queue)
          (else
           (set-cdr! (queue `rear-ptr) new-pair)
           ((queue `set-rear-ptr!) new-pair)
           queue))))
(define q1 (make-queue))
(print-queue q1)
(insert-queue! q1 `a)
(print-queue  q1)
(insert-queue! q1 `b)
(print-queue  q1)