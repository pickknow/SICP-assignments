#lang planet neil/sicp
(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))
(define (empty-deque? deque) (null? (front-ptr deque)))
(define (make-deque) (cons `() `()))
(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty deque" deque)
      (car (front-ptr deque))))

(define (rear-insert-deque! deque item)
 (let ((new-pair (cons (cons item `()) `())))
  (cond ((empty-deque? deque)
         (set-front-ptr! deque new-pair)
         (set-rear-ptr! deque new-pair)
         deque)
   (else
    (set-cdr! (car new-pair) (rear-ptr deque))
    (set-cdr! (rear-ptr deque) new-pair)
    (set-rear-ptr! deque new-pair)
    deque))))
(define (front-delete-deque! deque)
 (cond ((empty-deque? deque)
        (error "DELETE! called with an empty deque" deque))
       (else
         (set-front-ptr! deque (cdr (front-ptr deque)))
        (set-cdr! (cdr (front-deque deque)) `())
        deque)))
(define (front-insert-deque! deque item)
 (let ((new-pair (cons (cons item `()) `())))
  (cond ((empty-deque? deque)
         (set-rear-ptr! deque new-pair)
         (set-front-ptr! deque new-pair)
         deque)
        (else
         (set-cdr! new-pair (front-ptr deque))
         (set-cdr!  (front-deque deque) new-pair)
         (set-front-ptr! deque  new-pair)
         deque))))
(define (rear-delete-deque! deque)
 (cond ((empty-deque? deque)
        (error "DELETE! called with an empty deque" deque))
       (else
        (let ((last-pair (cdar (rear-ptr deque))))
         (set-rear-ptr! deque last-pair)
         deque))))

(define (print-deque deque)
      (define (iter current end)
        (if (eq? current end)
          (map display (list (caar current) "\n"))
          (begin (map display (list (caar current) " "))
                 (iter (cdr current) end))))

      (if (empty-deque? deque)
        (display "nil\n")
        (iter (front-ptr deque) (rear-ptr deque))))

 (define a (make-deque))
 (front-insert-deque! a 1)
 (rear-insert-deque! a 2)
 (front-insert-deque! a 3)
 (rear-insert-deque! a 4)
 (print-deque a)
  (rear-delete-deque! a)
 (print-deque a)
 (front-delete-deque! a)
 (print-deque a)
(front-insert-deque! a 11)
  (print-deque a)
