#lang planet neil/sicp
(define (make-deque)
  (let ((front-ptr `())
        (rear-ptr `()))
    (define (empty?)
      (null? front-ptr))
    (define (front-deque)
      (if (empty?)
          `()
          (car front-ptr)))
    (define (rear-deque)
      (if (empty?)
          `()
          (car rear-ptr)))
    (define (rear-insert! item)
      (let ((new-pair (cons (cons item `()) `())))
        (cond ((empty?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair))
              (else
               (set-cdr! (car new-pair) rear-ptr)
               (set-cdr! rear-ptr new-pair)
               (set! rear-ptr new-pair)))))
    (define (rear-delete!)
      (if (empty?)
          (error "delete an empty deque" front-ptr)
          (let ((new-pair (cdar rear-ptr)))
            (set! rear-ptr new-pair))))
    (define (front-insert! item)
      (let ((new-pair (cons (cons item `()) `())))
        (cond ((empty?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair))
              (else
               (set-cdr! new-pair  front-ptr)             
               (set-cdr! (car front-ptr) new-pair)
               (set! front-ptr new-pair)))))
    (define (front-delete!)
      (if (empty?)
          (error "DELETE an empty deque" front-ptr)
          (begin 
            (set! front-ptr (cdr front-ptr))
            (set-cdr! (car front-ptr) `()))))

    (define (print-deque)
      (define (iter current end)
        (if (eq? current end)
            (map display (list (caar current) "\n"))
            (begin (map display (list (caar current) " "))
                   (iter (cdr current) end))))
      (if (empty?)
          (display "nil\n")
          (iter front-ptr rear-ptr)))
    (define (dispatch m)
      (cond ((eq? m `rear-insert!) rear-insert!)
            ((eq? m `rear-delete!) (rear-delete!))
            ((eq? m `front-insert!) front-insert!)
            ((eq? m `front-delete!) (front-delete!))
            ((eq? m `print) (print-deque))))
    dispatch))

(define a (make-deque))
((a `rear-insert!) 1)
((a `rear-insert!) 2)
((a `front-insert!) 5)
((a `front-insert!) 6)
(a `print)
(a `rear-delete!)
(a `print)
(a `front-delete!)
(a `print)
