#lang planet neil/sicp
(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))
(define (set-rear-front-ptr lst item) (set-car! (cdr lst) item))
(define (set-rear-rear-ptr lst item) (set-cdr! (cdr lst) item))
(define (empty-deque? deque) (null? (front-ptr deque)))
(define (empty-front-ptr? lst) (null? (car lst)))
(define (make-deque) (cons `() `()))
(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty deque" deque)
      (car (front-ptr deque))))

(define (rear-insert-deque! deque item)
  (let ((new-pair (list item `() `())))
  (cond ((empty-deque? deque)
         (set-front-ptr! deque new-pair)
         (set-rear-ptr! deque new-pair)
         deque)
        (else         
         (set-rear-rear-ptr (rear-ptr deque) new-pair)
         (set-rear-front-ptr new-pair (rear-ptr deque))        
         (set-rear-ptr!  deque new-pair)         
         deque))))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" deque))
        (else
         (set-front-ptr! deque (cdr (front-ptr deque)))
         deque)))
(define (front-insert-deque! queue item)
  (let ((new-pair (cons item (front-ptr queue)))) 
    (cond ((empty-deque? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-front-ptr! queue new-pair)
           queue))))

(define a (make-deque))
(rear-insert-deque! a 1)
(rear-insert-deque! a 2)
(front-delete-deque! a)
