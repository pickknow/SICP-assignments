#lang racket
(define (cons x y)
  (define (set-x! v) (set! x v))
  (define (set-y! v) (set! y v))
  (define (dispatch m)
    (cond ((eq? m `car) x)
          ((eq? m `cdr) y)
          ((eq? m `set-car!) set-x!)
          ((eq? m `set-cdr!) set-y!)
          (else
           (error "Undefined operation --CONS" m))))
  dispatch)
  
(define (car z) (z `car))
(define (cdr z) (z `cdr))
(define (set-car! z new)
  ((z `set-car!) new)
  z)
(define (set-cdr! z new)
  ((z `set-cdr!) new)
  z)
(define (make-deque)
  (cons `() `()))
(define (front-ptr deque) (car deque))
(dfeine (rear-ptr deque) (cdr deque))
(define (empty-deque? deque)
  (null? (front-deque deque)))
(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty queue" deque)
      (car (front-ptr deque))))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))
(define (front-insert-deque! queue item)
  (let ((new-pair (cons item `())))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else
           (set-cdr! (rear-ptr deque) new-pair)
           (set-rear-ptr! deque new-pair)
           deque))))
(define (rear-insert-deque! deque item)
  
  (let ((new-pair (cons item `())))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else
           (set-cdr! (rear-ptr deque) new-pair)
           (set-rear-ptr! deque new-pair)
           deque))))
        
