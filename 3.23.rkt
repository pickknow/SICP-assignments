#lang racket
(define (cons x y)
  (define (set-x! v) (set! x v))
  (define (set-y! v) (set! y v))
  (define (dispatch m)
    (cond ((eq? m `car) x)
          ((eq? m `cdr) y)
          ((eq? m `set-car!) set-x!)
          ((eq? m `set-cdr!) set-y!)
          (else
           (error "Undefined operation --CONS" m))))
  dispatch)
  
(define (car z) (z `car))
(define (cdr z) (z `cdr))
(define (set-car! z new)
  ((z `set-car!) new)
  z)
(define (set-cdr! z new)
  ((z `set-cdr!) new)
  z)
(define (make-deque)
  (cons `() `()))
(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (empty-deque? deque)
  (null? (front-ptr deque)))
(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty queue" deque)
      (car (front-ptr deque))))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))

(define (print-deque deque)
  (if (empty-deque? deque)
      `()
      (let ((f (front-ptr deque))
            (e ( rear-ptr deque)))       
        (define (print-front l)
          (if (null? l)
              (display ") ")
              (begin (display (car l))
                     (print-front (cdr l)))))
        (display "(")
        (print-front f)
         (display "(")
        (print-front e))))

(define (rear-insert-deque! deque item)  
  (let ((new-pair (cons item `())))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else
           (set-cdr! (rear-ptr deque) new-pair)
           (set-rear-ptr! deque new-pair)
           deque))))

(define (front-insert-deque! deque item)
  (let ((new-pair (cons item `())))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else
           (let ((new-rear (set-cdr! new-pair (front-ptr deque))))
             (set-front-ptr! deque new-rear))
           deque))))
(define (delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an emtpy deque" deque))
         (else
          (set-front-ptr! deque (cdr (front-ptr deque)))
          deque)))

(define q1 (make-deque))
(rear-insert-deque! q1 `a)
(rear-insert-deque! q1 `b)
(front-insert-deque! q1 `c)
(print-deque q1)
(delete-deque! q1)
(print-deque q1)

        
