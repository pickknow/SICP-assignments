#lang planet neil/sicp
(define (make-tree key value left-branch right-branch)
  (list key value left-branch right-branch))
(define tree-key car)
(define tree-value cadr)
(define left-branch caddr)
(define right-branch cadddr)
(define empty-tree? null?)

(define (tree-set-key! tree key)
 (set-car! tree key))
(define (tree-set-value! tree value)
 (set-car! (cdr tree) value))
(define (tree-set-left! tree left-branch)
 (set-car! (cddr tree) left-branch))
(define (tree-set-right! tree right-branch)
 (set-car! (cdddr tree) right-branch))

(define (lookup key tree)
 (if (empty-tree? tree)
     `() 
    (let ((sk (tree-key tree)))
     (cond ((eq? sk key) (tree-value tree))
           ((< key sk) (lookup key (left-branch tree)))
           (else
            (lookup key (right-branch tree)))))))

(define (insert! key value tree)
  (if (empty-tree? tree)
      (make-tree  key value `() `())
      (let ((sk (tree-key tree)))
      (cond ((eq? key sk)
             (tree-set-value! value)
             tree)
            ((> key sk)
             (tree-set-right! tree
             (insert! key value (right-branch tree)))
             tree)
            ((< key sk)
             (tree-set-left! tree
             (insert! key value (left-branch tree)))
             tree)))))
(define a (make-tree 5 `a `() `()))
(insert! 6 `b a)
(insert! 7 `c a)
(insert! 8 `d a)
(lookup 6 a)
(lookup 8 a)
