(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex `acquire)
        (let ((val (apply p args)))
          (mutex `release)
          val))
      serialized-p)))
(define (make-mutex)
  (let ((cell (list #f)))
    (define (the-mutex m)
      (cond ((eq? m `acquire)
             (if (test-and-set! cell)
                 (the-mutex `acquire)));retry
            ((eq? m `release) (clear! cell))))
    the-mutex))
(define (clear! cell)
  (set-car! cell #f))

(define (test-and-set! cell)
  (if (car cell)
      #t
      (begin (set-car! cell #t)
             #f)))

(define (make-semaphore n)
  (let ((cell 0))
    (define (the-semaphore m)
      (cond ((eq? m `acquire)
             (if (test-and-set2! cell n)
                 (the-semaphore `acquire))
             ((eq? m `release) (celar2! cell)))))
    the-semaphore))
(define (test-and-set2! cell n)
  (if (>  cell n)
      #t
      (beging (set! cell (+ cell 1))
              #f)))
(define (celar2 cell)
  (set! cell (- cell 1)))
