#lang planet neil/sicp
(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex 'acquire)
        (let ((val (apply p args)))
          (mutex 'release)
          val))
      serialized-p)))
(define (make-mutex)
  (let ((cell (list #f)))
    (define (the-mutex m)
      (cond ((eq? m `acquire)
             (cond ((test-and-set! cell)
                 (the-mutex `acquire))))
             ((eq? m `release) (clear! cell))))
    the-mutex))
(define (clear! cell)
  (set-car! cell #f))
(define (test-and-set! cell)
  (if (car cell)
      #t
      (begin (set-car! cell #t)
             #f)))
(define (make-account-and-serializer balance n)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((balance-serializer (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m `withdraw) withdraw)
            ((eq? m `deposit) deposit)
            ((eq? m `balance) balance)
            ((eq? m `number) n)
            ((eq? m `serializer) balance-serializer)
            (else (error "Unknown request -- MAKE-ACCOUNT"
                         m))))
    dispatch))

(define (exchange account1 account2)
  (let ((difference (- (account1 'balance)
                       (account2 'balance))))
    ((account1 'withdraw) difference)
    ((account2 'deposit) difference)))

(define (serialized-exchange account1 account2)
  (let ((serializer1 (account1 'serializer))
        (serializer2 (account2 'serializer))
        (sn1 (account1 `number))
        (sn2 (account2 `number)))
    ((if (> sn1 sn2)
         (serializer1 (serializer2 exchange))
         (serializer2 (serializer1 exchange)))
     account1
     account2)))

