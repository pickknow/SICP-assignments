#lang racket
(define rand
  (let ((x random-init))
    (lambda ()
      (set! x (rand-update x))
      x)))
(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials cesaro-test))))
(define (cesaro-test)
  (= (gcd (rand) (rand)) 1))
(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1) (+ trials-passed 1)))
          (eles
           (iter (-trials-remaining 1) trials-passed))))
  (iter trials 0))

(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (make-P rec)
  (let ((x1 (caar rec))
        (y1 (cadar rec))
        (x2 (caadr rec))
        (y2 (car (cdadr rec))))
    (let ((cx (/ (+ x1 x2) 2))
          (cy (/ (+ y1 y2) 2))
          (r (- (/ (+ x1 x2) 2) x1)))
      (let ((x (rand2 (random-in-range x1 x2)))
            (y (rand2 (random-in-range y1 y2))))
             (lambda ()
               (<= (+ (square (- (x) cx))
                      (square (- (y) cy)))
                   (square r)))))))
(define rec `((2 4) (8 10)))
(define (cesaro-test rec)
  (let ((x1 (caar rec))
        (y1 (cadar rec))
        (x2 (caadr rec))
        (y2 (car (cdadr rec))))
  (= (gcd (rand2 (random-in-range x1 x2))
          (rand2 (random-in-range y1 y2)) 1))))
  
(define (estimate-integral trials rec)
  (sqrt (/ 6 (monte-carlo trials (make-P rec)))))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1) (+ trials-passed 1)))
          (eles
           (iter (-trials-remaining 1) trials-passed))))
  (iter trials 0))
          