#lang racket
(require math/base)
(define random-init 10)
(define rand
  (let ((x random-init))
    (lambda ()
      (set! x (random-natural x))
      x)))
(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials cesaro-test))))
(define (cesaro-test)
  (= (gcd (rand) (rand)) 1))
(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1) (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))

(define random-in-range random-integer)
(define (p? rec)
  (let ((x1 (caar rec))
        (y1 (cadar rec))
        (x2 (caadr rec))
        (y2 (car (cdadr rec))))
    (let ((cx (/ (+ x1 x2) 2))
          (cy (/ (+ y1 y2) 2))
          (r (- (/ (+ x1 x2) 2) x1)))
             (lambda ()
               (let ((x (random-in-range x1 x2))
                    (y (random-in-range y1 y2)))
                    (<= (+ (sqr (- x 5))
                      (sqr (- y 7)))
                   (sqr 3)))))))
(define rec `((2 4) (8 10)))
(define (estimate-integral trials rec)
  (sqrt (/ 6 (monte-carlo trials (p? rec)))))
(estimate-integral 10 rec)
