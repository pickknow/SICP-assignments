#lang racket
(define (make-account n passwd)
  (let ((balance n)
        (count 0)
        (pwd passwd))
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient balance"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (call-the-cops)
      (error "call-the-cops"))
    (define (same-pwd? new)
      (eq? pwd new))
    (define (dispatch p m)
      (if (eq? p pwd)
          (cond ((eq? m `withdraw) withdraw)
                ((eq? m `deposit) deposit)
                ((eq? m `same-pwd?) same-pwd?)
                (else
                 (error "Unknow request -- MAKE-ACCOUNT")))          
          (error "Incorrect password")))
    dispatch))
(define peter-acc (make-account 100 `hg))

(define (make-joint acc pwd newpwd)
  (if (acc pwd `same-pwd?)
      (lambda (p m)
        (if (eq? p newpwd)
            (acc pwd m)
            (error "Incorrect password")))
      (error "Not same password")))
(define paul-acc
  (make-joint peter-acc `hg `gh))
((peter-acc `hg `withdraw) 10)
((paul-acc `gh `deposit) 10)
  
