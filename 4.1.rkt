(define (list-of-values exps env)
  (if (no-operands? exps)
      `()
      (cons (eval (first-operand exps) env)
            (list-of-values (rest-operands exps) env))))
(define (list-of-values-left exps env)
  (if (no-operands? exps)
      `()
      (let ((first (eval (first-operand exps) env))
            (second (list-of-values-left (rest-operands exps) env)))
        (cons first second))))
(defube (list-of-values-right exps env)
   (if (no-operands? exps)
      `()
      (let ((second (list-of-values-right (rest-operands exps) env))
            (first (eval (first-operand exps) env)))
        (cons first second))))