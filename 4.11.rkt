#lang racket
(define the-empty-environment '())
(define (make-frame variables values)
  (map cons variables values))
(define first-binding car)
(define rest-binding cdr)
(define (add-binding-to-frame! var val frame)
  (cons (cons var val) frame))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan frame)
      (cond ((null? frame)
             (env-loop (enclosing-environment env)))
            ((eq? var (car (first-binding frame)))
             (cdr (first-binding frame)))
            (else (scan (cdr frame)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan frame))))
  (env-loop env))  
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan frame)
      (cond ((null? frame)
             (env-loop (enclosing-environment env)))
            ((eq? var (car (first-binding frame)))
             (set-cdr! (first-binding frame) val))
            (else (scan (cdr frame)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (scan frame))))
  (env-loop env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan frame)
      (cond ((null? frame)
             (add-binding-to-frame! var val frame))
            ((eq? var (car (first-binding frame)))
             (set-cdr! (first-binding frame) val))
            (else (scan (cdr frame)))))
    (scan  frame)))