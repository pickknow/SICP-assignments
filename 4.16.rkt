#lang racket
(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      false))
(define (lambda? exp) (tagged-list? exp 'lambda))
(define (lambda-parameters exp) (cadr exp))
(define (lambda-body exp) (cddr exp))
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))

(define (definition? exp)
  (tagged-list? exp 'define))
(define (definition-variable exp)
  (if (symbol? (cadr exp))
      (cadr exp)
      (caadr exp)))
(define (definition-value exp)
  (if (symbol? (cadr exp))
      (caddr exp)
      (make-lambda (cdadr exp)
                   (cddr exp))))
(define str '(lambda ()
               (define u 1)
               (define v 2)
               (display u)
               (display v)))
(define str2 '(let ((a 1))
                (define (f x)
                  (define a 5)
                  (define b (+ a x))    
                  (+ a b))
                (f 10)))
  

  
;b

(define (scan-out-defines proc)
  (define (scan-defines lst defines bodys)
  (cond ((null? lst) (cons defines bodys))
        ((definition? (car lst))
         (scan-defines (cdr lst) (cons (car lst) defines) bodys))
        (else
         (scan-defines (cdr lst) defines (cons (car lst) bodys)))))
(define (make-lets lst)      
  (cons
   (map (lambda (x)
          (list (definition-variable x) ''*unassigned*))
        lst)
   (map (lambda (x)
          (list 'set! (definition-variable x)  (definition-value x)))
        lst)))
  (let ((defines (scan-defines proc `() `())))
     (list (append (cons 'let (make-lets (car defines)))
            (cdr defines)))))
;c
(define (contain-defines exps) 
   (if (null? exps) 
     false 
     (or (if (definition? (car exps)) 
           true 
           false) 
         (contain-defines (cdr exps)))))
(define (make-procedure parameters body env) 
  (if (contain-defines body) 
      (list 'procedure parameters (scan-out-defines body) env) 
      (list 'procedure parameters body env)))
