#lang racket
(require "lib/eval.rkt")
(require "lib/table.rkt")
(define (exp-type exp) (car exp))
(define (exp-body exp) (cdr exp))
(define (eval exp env)
  (cond ((self-evaluating? exp) exp))        
        ((get exp-type) (exp-body exp env))
        (else
         (error "Unknown expression type -- EVAL" exp)))

(put `quoted? text-of-quotation)
(put `variable? lookup-variable-value)
(put `assignment? eval-assignment)
(put `definition? eval-definition)
(put `if? eval-if)
(put `lambda? (lambda (exp env)
                (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env)))
(put `begin?  (lambda (exp env)
                (eval-sequence (begin-actions exp)
                         env)))
(put `cond? eval-if)
(put `application? (lambda (exp env)
                (apply (eval (operator exp) env)
                (list-of-values (operands exp) env))))