#lang racket
(require "lib/eval.rkt")
(define (let? exp)
  (tagged-list? exp `let))
(define (named-let? exp) (and (let? exp) (symbol? (cadr exp)))) 
(define (let-varibales exp)
  (cadr exp))
(define (let-body exp)
  (cddr exp))
(define (let-bindings exp)
  (cadr exp))
(define (let-variables exp)
  (map car (let-bindings exp)))
(define (make-let bindings body)
  (list 'let bindings body))
(define (let-values exp)
  (map cadr (let-bindings exp)))
(define (let->lambda-normal exp)
  ((make-lambda (let-variables exp)
                (let-body exp))
   (let-values exp)))

(define name-let-var cadr)
(define name-let-bindings caddr)
(define name-let-body cddd)

(define (name-let-vars exp)
  (map car (name-let-bindings)))
(define (name-let-value exp)
  (map cadr (name-let-bindings)))
(define (named-let exp)  
  (list `define (name-let-var exp)
                (make-lambda (name-let-value exp)
                             (name-let-body)))
  ((name-let-var exp) name-let-value))

(define (let->lambda exp)
  (if (named-let? exp)
      (named-let exp)
      (let->lambda-normal exp)))
