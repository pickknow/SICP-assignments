#lang racket
(require "lib/eval.rkt")
(define (let? exp)
  (tagged-list? exp `let))
(define (named-let? exp) (and (let? exp) (symbol? (cadr exp)))) 
(define (let-varibales exp)
  (cadr exp))
(define (let-body exp)
  (cddr exp))
(define (let-bindings exp)
  (cadr exp))
(define (let-variables exp)
  (map car (let-bindings exp)))
(define (make-let bindings body)
  (list 'let bindings body))
(define (let-values exp)
  (map cadr (let-bindings exp)))
(define (let->lambda-normal exp)
  ((make-lambda (let-variables exp)
                (let-body exp))
   (let-values exp)))
(define (named-let exp)
  (list `let (list (cadr exp)
                   (

(define (fib n)
  (let fib-iter ((a 1)
                 (b 0)
                 (count n))
    (if (= count 0)
        b
        (fib-iter (+ a b) a (- count 1)))))