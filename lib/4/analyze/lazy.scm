(load "util.scm")
(load "env.scm")
(load "keyword-lazy.scm")
(load "builtin.scm")
(load "trunk.scm")

(define (actual-value exp env)
 (force-it (eval exp env)))
(define (text-of-quotation-lazy exp)
   (define (quotation->cons exp)
     (if (null? exp)
       ''()
       (if (pair? exp)
         (list 'cons (quotation->cons (car exp)) (quotation->cons (cdr exp)))
         `',exp)))
   (let ((env (cons (make-frame '() '()) '())))
     (eval '(define (cons x y) (lambda (m) (m x y))) env)
     (eval '(define (car z) (z (lambda (p q) p))) env)
     (eval '(define (cdr z) (z (lambda (p q) q))) env)
     (let ((text (cadr exp)))
       (if (pair? text)
         (eval (quotation->cons text) env)
         text))))
 (define text-of-quotation text-of-quotation-lazy)
;(define (procedure-parameters p)
; (define (name parameters)
;  (if (pair? parameters)
;      (car parameters)
;      parameters))
; (define (parameters-names parameters)
;  (if (null? parameters)
;      '()
;      (cons (name (car parameters))
;            (parameters-names (cdr parameters)))))
; (parameters-names (cadr p)))
;(define (procedure-raw-parameters p) (cadr p))

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((application? exp)
         (apply-inner (actual-value (operator exp) env)
                (operands exp) env))
        (else
         (error "Unknown expression type -- EVAL" exp))))
(define (apply-inner procedure arguments env)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure
          procedure
          (list-of-arg-values arguments env)))
         ((compound-procedure? procedure)
         (eval-sequence
           (procedure-body procedure)
           (extend-environment
             (procedure-parameters procedure)
             (list-of-delayed-values arguments env)
             (procedure-environment procedure))))
        (else
         (error
          "Unknown procedure type -- APPLY" (list procedure arguments)))))

(define (list-of-arg-values exp env)
 (if (no-operands? exp)
     '()
     (cons (actual-value (first-operand exp) env)
           (list-of-arg-values (rest-operands exp)
                                 env))))
(define (list-of-delayed-values exps env)
  (if (no-operands? exps)
    '()
    (cons (delay-it (first-operand exps) env)
          (list-of-delayed-values (rest-operands exps) env))))
(define (list-of-delayed-args2 raw exps env)
 (define (arg-value raw exp)
  (if (and (pair? raw) (pair? (cdr raw)))
      (cond ((eq? (cadr raw) 'lazy)
              (delay-it-no-memo exp env))
            ((eq? (cadr raw) 'lazy-memo)
             (delay-it exp env))
            (else "Unkonw parameter type LIST-OF-DELAY-ARGS:" (cadr raw)))
      (actual-value exp env)))
  (if (no-operands? exps)
      '()
      (cons (arg-value (car raw) (first-operand exps))
            (list-of-delayed-args   (cdr raw)
                                    (rest-operands exps)
                                  env))))

(define input-prompt ";;; L-Eval input:")
(define output-prompt ";;; L-Eval value:")
(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output (actual-value input the-global-environment)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))
(define (prompt-for-input string)
  (newline) (newline) (display string) (newline))

(define (announce-output string)
  (newline) (display string) (newline))
(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure
                     (procedure-parameters object)
                     (procedure-body object)
                     '<procedure-env>))
      (display object)))
(define the-global-environment (setup-environment))
(driver-loop)
