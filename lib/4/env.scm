(load "util.scm")
(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())

(define (make-frame variables values)
  (cons variables values))
(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))

(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
          (error "Too many arguments supplied" vars vals)
          (error "Too few arguments supplied" vars vals))))
(define (variable-abs var val env op1 op2)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (op1 env-loop var val env vars vals))
            ((eq? var (car vars))
             (op2 env-loop var val env vars vals))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))
(define (lookup-variable-value var env)
  (variable-abs var `() env
                (lambda (env-loop var val env vars vals)
                  (env-loop (enclosing-environment env)))
                (lambda (env-loop var val env vars vals)
                  (if (eq? '*unassigned* (car vals))
                      (error "Unassigned" val)
                      (car vals)))))

(define (set-variable-value! var val env)
    (variable-abs var val env
   (lambda (env-loop var val env vars vals)
     (env-loop (enclosing-environment env)))
   (lambda (env-loop var val env vars vals)
      (set-car! vals val))))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (variable-abs var val env
                  (lambda (env-loop var val env vars vals)
                    (add-binding-to-frame! var val frame))
                  (lambda (env-loop var val env vars vals)
                    (set-car! vals val)))))
(define (make-unbound! var env)
  (variable-abs var `() env
   (lambda (env-loop var val env vars vals)
     true)
   (lambda (env-loop var val env vars vals)
     (set-car! vals `())
     (set-cdr! vals `())))) 

(define (setup-environment)
  (let ((initial-env
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    initial-env))
