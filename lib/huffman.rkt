#lang racket/base
(provide memq?)
 (define (memq? x set)
  (cond ((null? set) #f)
        ((eq? x (car set)) #t)
        (else (memq? x (cdr set)))))
(provide make-leaf)
(define (make-leaf symbol weight)
  (list `leaf symbol weight))
(provide leaf?)
(define (leaf? object)
  (eq? (car object) `leaf))
(provide symbol-leaf)
(define (symbol-leaf x) (cadr x))
(provide weight-leaf)
(define (weight-leaf x) (caddr x))
(provide make-code-tree)
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
(provide left-branch)
(define left-branch car)
(provide right-branch)
(define right-branch cadr)
(provide symbols)
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(provide weight)
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))
(provide decode)
(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        `()
        (let ((next-branch
               (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))
(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit -- CHOOSE-BRANCH" bit))))
(provide adjoin-set)
(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))
(provide make-leaf-set)
(define (make-leaf-set pairs)
  (if (null? pairs)
      `()
      (let ((pair (car pairs)))
        (adjoin-set (make-leaf (car pair)
                               (cadr pair))
                    (make-leaf-set (cdr pairs))))))
 (provide sample-tree)
(define sample-tree
  (make-code-tree (make-leaf `A 4)
                  (make-code-tree
                   (make-leaf `B 2)
                   (make-code-tree (make-leaf `D 1)
                                   (make-leaf `C 1)))))
(provide encode)
(define (encode message tree)
  (if (null? message)
      `()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
(provide in?)
(define (in? m tree)
  (if (leaf? tree)
      (eq? m (symbol-leaf tree))
      (memq? m (symbols tree))))
(provide encode-symbol)
(define (encode-symbol m tree)
 (cond ((leaf? tree) `())
       ((in? m (left-branch tree)) 
        (cons 0 (encode-symbol m (left-branch tree))))
       ((in? m (right-branch tree))
        (cons 1 (encode-symbol m (right-branch tree))))))

;(define sample-message `(0 1 1 0 0 1 0 1 0 1 1 1 0))
;(decode sample-message sample-tree)
;'(A D A B B C A)
