#lang racket/base
(provide accumulate)
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(provide accumulate-n)
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      `()
      (cons (accumulate op init  (mapa seqs))
            (accumulate-n op init (mapb seqs)))))
(provide mapa)
(define (mapa seqs)
  (map (lambda (x)
         (car x))
       seqs))
(provide mapb)
(define (mapb seqs)
  (map (lambda (x)
         (cdr x))
       seqs))

(provide enumerate-tree)
(define (enumerate-tree tree)
  (cond ((null? tree) `())
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                      (enumerate-tree (cdr tree))))))

(provide list-op)
(define (list-op op seq)
  (accumulate op (car seq) (cdr seq)))