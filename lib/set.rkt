#lang racket/base
(provide last-pair)
(define (last-pair x)
  (if (null? (cdr x))
      x
      (last-pair (cdr x))))
(provide cons)
(define (cons x y)
  (define (set-x! v) (begin (set! x v) x))
  (define (set-y! v) (begin (set! y v) y))
  (define (dispatch m)
    (cond ((eq? m 'car) x)
          ((eq? m 'cdr) y)
          ((eq? m 'set-car!) set-x!)
          ((eq? m 'set-cdr!) set-y!)
          (else (error "Undefined operation -- CONS" m))))
  dispatch)
(provide car)
(define (car z) (z 'car))
(provide cdr)
(define (cdr z) (z 'cdr))
(provide set-car!)
(define (set-car! z new-value)
  ((z 'set-car!) new-value)
  z)
(provide set-cdr!)
(define (set-cdr! z new-value)
  ((z 'set-cdr!) new-value)
  z)
(provide print)
(define (print lst)
  (cond ((procedure? lst)
         (display (list 
                   (print (car lst))        
                   (print (cdr lst)))))
         (else
           lst
          )))
