#lang racket/base
(provide *table*)
(define *table* (make-hash))
(provide get)
(define (get op type) (hash-ref *table* (list op type) #f))
(provide put)
(define (put op type val) (hash-set! *table* (list op type) val))
(provide variable?)
(define (variable? x) (symbol? x))
(provide same-variable?)
(define (same-variable? v1 v2)
  (and (variable? v1)
       (variable? v2)
       (eq? v1 v2)))
(provide square)
(define (square x) (* x x))

(provide attach-tag)  
(define (attach-tag type-tag contents)
  (cons type-tag contents))
(provide type-tag)
(define (type-tag datum)
  (if (pair? datum)
      (car datum)
      (error "Bad tagged datum -- TYPE-TAG" datum)))
(provide contents)
(define (contents datum)
  (if (pair? datum)
      (cdr datum)
      (error "Bad tagged datum -- CONTENTS" datum)))
(provide rectangular?)
(define (rectangular? z)
  (eq? (type-tag z) 'rectangular))
(provide polar?)
(define (polar? z)
  (eq? (type-tag z) 'polar))
(provide =number?)
(define (=number? exp num)
  (and (number? exp) (= exp num)))
